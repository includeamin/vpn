{
  "_args": [
    [
      {
        "raw": "telnet-client@github:vpnht/node-telnet-client",
        "scope": null,
        "escapedName": "telnet-client",
        "name": "telnet-client",
        "rawSpec": "github:vpnht/node-telnet-client",
        "spec": "github:vpnht/node-telnet-client",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:vpnht/node-telnet-client.git",
          "sshUrl": "git+ssh://git@github.com/vpnht/node-telnet-client.git",
          "httpsUrl": "git+https://github.com/vpnht/node-telnet-client.git",
          "gitUrl": "git://github.com/vpnht/node-telnet-client.git",
          "shortcut": "github:vpnht/node-telnet-client",
          "directUrl": "https://raw.githubusercontent.com/vpnht/node-telnet-client/master/package.json"
        }
      },
      "D:\\Projects\\vpn\\node_modules\\node-openvpn"
    ]
  ],
  "_from": "vpnht/node-telnet-client",
  "_id": "telnet-client@0.1.0",
  "_inCache": true,
  "_location": "/telnet-client",
  "_phantomChildren": {},
  "_requested": {
    "raw": "telnet-client@github:vpnht/node-telnet-client",
    "scope": null,
    "escapedName": "telnet-client",
    "name": "telnet-client",
    "rawSpec": "github:vpnht/node-telnet-client",
    "spec": "github:vpnht/node-telnet-client",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:vpnht/node-telnet-client.git",
      "sshUrl": "git+ssh://git@github.com/vpnht/node-telnet-client.git",
      "httpsUrl": "git+https://github.com/vpnht/node-telnet-client.git",
      "gitUrl": "git://github.com/vpnht/node-telnet-client.git",
      "shortcut": "github:vpnht/node-telnet-client",
      "directUrl": "https://raw.githubusercontent.com/vpnht/node-telnet-client/master/package.json"
    }
  },
  "_requiredBy": [
    "/node-openvpn"
  ],
  "_resolved": "git://github.com/vpnht/node-telnet-client.git#fd45812836728efef816749d5c4d19fbf9adc279",
  "_shasum": "63235e8cd533c77962b005d4c084ad0b5b1d11e4",
  "_shrinkwrap": null,
  "_spec": "telnet-client@github:vpnht/node-telnet-client",
  "_where": "D:\\Projects\\vpn\\node_modules\\node-openvpn",
  "author": {
    "name": "Mario Kozjak",
    "email": "kozjakm1@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mkozjak/node-telnet-client/issues"
  },
  "contributors": [
    {
      "name": "Petar Koretic",
      "email": "petar.koretic@sartura.hr"
    }
  ],
  "dependencies": {},
  "description": "Simple node.js telnet client",
  "devDependencies": {
    "coveralls": "^2.11.2",
    "jscoverage": "^0.5.9",
    "nodeunit": ">= 0.9.0"
  },
  "engine": "node >= 0.10.23",
  "gitHead": "fd45812836728efef816749d5c4d19fbf9adc279",
  "homepage": "https://github.com/mkozjak/node-telnet-client#readme",
  "license": {
    "type": "MIT"
  },
  "main": "./lib/telnet-client.js",
  "name": "telnet-client",
  "optionalDependencies": {},
  "readme": "[![GitHub license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/mkozjak/node-telnet-client/blob/master/LICENSE)\r\n[![Build Status](https://travis-ci.org/mkozjak/node-telnet-client.svg?branch=master)](https://travis-ci.org/mkozjak/node-telnet-client)\r\n[![Coverage Status](https://coveralls.io/repos/mkozjak/node-telnet-client/badge.svg?branch=master)](https://coveralls.io/r/mkozjak/node-telnet-client?branch=master)  \r\n[![NPM](https://nodei.co/npm/telnet-client.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/telnet-client/)\r\n\r\n# node-telnet-client\r\n\r\nA simple telnet client for node.js\r\n\r\n## Installation\r\n\r\nLocally in your project or globally:\r\n\r\n```\r\nnpm install telnet-client\r\nnpm install -g telnet-client\r\n```\r\n\r\n## Example usage\r\n\r\n```js\r\nvar telnet = require('telnet-client');\r\nvar connection = new telnet();\r\n\r\nvar params = {\r\n  host: '127.0.0.1',\r\n  port: 23,\r\n  shellPrompt: '/ # ',\r\n  timeout: 1500,\r\n  // removeEcho: 4\r\n};\r\n\r\nconnection.on('ready', function(prompt) {\r\n  connection.exec(cmd, function(response) {\r\n    console.log(response);\r\n  });\r\n});\r\n\r\nconnection.on('timeout', function() {\r\n  console.log('socket timeout!')\r\n  connection.end();\r\n});\r\n\r\nconnection.on('close', function() {\r\n  console.log('connection closed');\r\n});\r\n\r\nconnection.connect(params);\r\n```\r\n\r\n## API\r\n\r\n```js\r\nvar telnet = require('telnet-client');\r\nvar connection = new telnet();\r\n```\r\n\r\n### connection.connect(options)\r\n\r\nCreates a new TCP connection to the specified host, where 'options' is an object\r\nwhich can include following properties:\r\n\r\n* `host`: Host the client should connect to. Defaults to '127.0.0.1'.\r\n* `port`: Port the client should connect to. Defaults to '23'.\r\n* `timeout`: Sets the socket to timeout after the specified number of milliseconds\r\nof inactivity on the socket.\r\n* `shellPrompt`: Shell prompt that the host is using. Defaults to regex '/(?:\\/ )?#\\s/'.\r\n* `loginPrompt`: Username/login prompt that the host is using. Defaults to regex '/login[: ]*$/i'.\r\n* `passwordPrompt`: Username/login prompt that the host is using. Defaults to regex '/Password: /i'.\r\n* `username`: Username used to login. Defaults to 'root'.\r\n* `password`: Username used to login. Defaults to 'guest'.\r\n* `irs`: Input record separator. A separator used to distinguish between lines of the response. Defaults to '\\r\\n'.\r\n* `ors`: Output record separator. A separator used to execute commands (break lines on input). Defaults to '\\n'.\r\n* `echoLines`: The number of lines used to cut off the response. Defaults to 1.\r\n* `pageSeparator`: The pattern used (and removed from final output) for breaking the number of lines on output. Defaults to '---- More'.\r\n\r\n### connection.exec(data, [options], [callback])\r\n\r\nSends data on the socket (should be a compatible remote host's command if sane information is wanted).\r\nThe optional callback parameter will be executed when the data is finally written out - this may not be immediately.\r\nCommand result will be passed as the first argument to the callback.\r\n\r\nOptions:\r\n\r\n* `shellPrompt`: Shell prompt that the host is using. Defaults to regex '/(?:\\/ )?#\\s/'.\r\n* `loginPrompt`: Username/login prompt that the host is using. Defaults to regex '/login[: ]*$/i'.\r\n* `timeout`: Sets the socket to timeout after the specified number of milliseconds\r\nof inactivity on the socket.\r\n* `irs`: Input record separator. A separator used to distinguish between lines of the response. Defaults to '\\r\\n'.\r\n* `ors`: Output record separator. A separator used to execute commands (break lines on input). Defaults to '\\n'.\r\n* `echoLines`: The number of lines used to cut off the response. Defaults to 1.\r\n\r\n### connection.end()\r\n\r\nHalf-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.\r\n\r\n### connection.destroy()\r\n\r\nEnsures that no more I/O activity happens on this socket. Only necessary in case of errors (parse error or so).\r\n\r\n### Event: 'connect'\r\n\r\nEmitted when a socket connection is successfully established.\r\n\r\n### Event: 'ready'\r\n\r\nEmitted when a socket connection is successfully established and the client is successfully connected to the specified remote host.\r\nA value of prompt is passed as the first argument to the callback.\r\n\r\n### Event: 'writedone'\r\n\r\nEmitted when the write of given data is sent to the socket.\r\n\r\n### Event: 'timeout'\r\n\r\nEmitted if the socket times out from inactivity. This is only to notify that the socket has been idle.\r\nThe user must manually close the connection.\r\n\r\n### Event: 'error'\r\n\r\nEmitted when an error occurs. The 'close' event will be called directly following this event.\r\n\r\n### Event: 'end'\r\n\r\nEmitted when the other end of the socket (remote host) sends a FIN packet.\r\n\r\n### Event: 'close'\r\n\r\nEmitted once the socket is fully closed.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mkozjak/node-telnet-client.git"
  },
  "scripts": {
    "coveralls": "jscoverage lib && NODETELNETCLIENT_COV=1 nodeunit --reporter=lcov test | coveralls",
    "test": "nodeunit test"
  },
  "version": "0.1.0"
}
